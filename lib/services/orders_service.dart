import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import '../config/app_config.dart';

/// ------------------------------------------------------------
/// üöö OrdersService (‡∏ù‡∏±‡πà‡∏á USER / SENDER)
/// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ / ‡∏î‡∏π‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á / ‡∏î‡∏π‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö /
/// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô / ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ / ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏±‡∏™‡∏î‡∏∏
/// ------------------------------------------------------------
class OrdersService {
  final String baseUrl = AppConfig.apiBaseUrl;
  final _storage = const FlutterSecureStorage();

  // ‚úÖ ‡∏î‡∏∂‡∏á Header ‡∏ó‡∏µ‡πà‡∏°‡∏µ JWT Token
  Future<Map<String, String>> _authHeader() async {
    final token = await _storage.read(key: 'token');
    return token == null
        ? {'Content-Type': 'application/json'}
        : {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          };
  }

  // ‚úÖ 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  Future<Map<String, dynamic>?> searchReceiver(String phone) async {
    final uri = Uri.parse('$baseUrl/api/users/search?phone=$phone');
    final res = await http.get(uri, headers: await _authHeader());
    final map = json.decode(res.body) as Map<String, dynamic>;

    if (res.statusCode >= 200 &&
        res.statusCode < 300 &&
        map['success'] == true) {
      return map['data'];
    } else {
      throw Exception(map['message'] ?? '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‚úÖ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà (Shipment ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
  Future<Map<String, dynamic>> createOrder({
    required String senderId,
    required String receiverId,
    required Map<String, dynamic> receiverAddress,
    required List<Map<String, dynamic>> items,
    List<File>? images,
  }) async {
    final uri = Uri.parse('$baseUrl/api/parcels');
    final req = http.MultipartRequest('POST', uri);

    req.fields['senderId'] = senderId;
    req.fields['receiverId'] = receiverId;
    req.fields['receiverAddress'] = json.encode(receiverAddress);
    req.fields['items'] = json.encode(items);

    // ‚úÖ ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    if (images != null && images.isNotEmpty) {
      for (final img in images) {
        req.files.add(await http.MultipartFile.fromPath('images', img.path));
      }
    }

    final streamed = await req.send();
    final body = await streamed.stream.bytesToString();
    final map = json.decode(body);

    if (streamed.statusCode >= 200 && streamed.statusCode < 300) {
      return map;
    } else {
      throw Exception(map['message'] ?? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‚úÖ 3. ‡∏î‡∏∂‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏™‡πà‡∏á
  Future<List<Map<String, dynamic>>> getSenderParcels(String senderId) async {
    final uri = Uri.parse('$baseUrl/api/parcels/sender/$senderId');
    final res = await http.get(uri, headers: await _authHeader());
    final map = json.decode(res.body);

    if (res.statusCode >= 200 && res.statusCode < 300) {
      final List list = map['data'] ?? [];
      return list.cast<Map<String, dynamic>>();
    } else {
      throw Exception(map['message'] ?? '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‚úÖ 4. ‡∏î‡∏∂‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
  Future<List<Map<String, dynamic>>> getReceiverParcels(
    String receiverId,
  ) async {
    final uri = Uri.parse('$baseUrl/api/parcels/receiver/$receiverId');
    final res = await http.get(uri, headers: await _authHeader());
    final map = json.decode(res.body);

    if (res.statusCode >= 200 && res.statusCode < 300) {
      final List list = map['data'] ?? [];
      return list.cast<Map<String, dynamic>>();
    } else {
      throw Exception(map['message'] ?? '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‚úÖ 5. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<Map<String, dynamic>> uploadProof(String orderId, File image) async {
    final uri = Uri.parse('$baseUrl/api/orders/$orderId/proof');
    final req = http.MultipartRequest('POST', uri);
    req.files.add(await http.MultipartFile.fromPath('image', image.path));

    final streamed = await req.send();
    final body = await streamed.stream.bytesToString();
    final map = json.decode(body);

    if (streamed.statusCode >= 200 &&
        streamed.statusCode < 300 &&
        map['success'] == true) {
      return map['data'] ?? {};
    } else {
      throw Exception(map['message'] ?? '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }

  // ‚úÖ 6. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏±‡∏™‡∏î‡∏∏ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ParcelDetailPage)
  Future<Map<String, dynamic>> getParcelDetail(String orderId) async {
    final uri = Uri.parse('$baseUrl/api/parcels/$orderId');
    final res = await http.get(uri, headers: await _authHeader());
    final map = json.decode(res.body);

    if (res.statusCode >= 200 &&
        res.statusCode < 300 &&
        map['success'] == true) {
      final data = map['data'] ?? {};
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö proofImageUrl ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
      return {
        ...data,
        'proofImageUrl':
            data['proofImageUrl'] ??
            data['proof_image'] ??
            '', // fallback ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
      };
    } else {
      throw Exception(map['message'] ?? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ');
    }
  }

  // ‚úÖ 7. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Map<String, dynamic>>> getAllContacts() async {
    final uri = Uri.parse('$baseUrl/api/users/all');
    final res = await http.get(uri, headers: await _authHeader());
    final map = json.decode(res.body);

    if (res.statusCode >= 200 &&
        res.statusCode < 300 &&
        map['success'] == true) {
      return List<Map<String, dynamic>>.from(map['data'] ?? []);
    } else {
      throw Exception(map['message'] ?? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
    }
  }
}
