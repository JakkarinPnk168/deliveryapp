import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import '../services/auth_service.dart';

class RegisterUserController {
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  File? profileImage;
  bool isSubmitting = false;

  final AuthService _authService;
  RegisterUserController({AuthService? authService})
    : _authService = authService ?? AuthService();

  /// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå +66 ‚Üí 0 ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  String _normalizePhone(String input) {
    var s = input.trim().replaceAll(RegExp(r'[^0-9\+]'), '');
    if (s.startsWith('+66')) s = '0${s.substring(3)}';
    return s;
  }

  /// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  Future<void> pickProfileImage() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(
      source: ImageSource.gallery,
      imageQuality: 85,
      maxWidth: 1024,
    );
    if (picked != null) {
      profileImage = File(picked.path);
      debugPrint("üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${picked.path}");
    } else {
      debugPrint("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
    }
  }

  /// ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å User (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô)
  Future<bool> register(BuildContext context) async {
    if (isSubmitting) return false;

    final phone = _normalizePhone(phoneController.text);
    final name = nameController.text.trim();
    final pass = passwordController.text.trim();

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (phone.isEmpty || name.isEmpty || pass.isEmpty) {
      _showSnack(context, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return false;
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    if (!RegExp(r'^0\d{9}$').hasMatch(phone)) {
      _showSnack(context, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 0812345678)");
      return false;
    }

    if (pass.length < 6) {
      _showSnack(context, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
      return false;
    }

    isSubmitting = true;

    try {
      // ‚úÖ 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö backend ‡∏Å‡πà‡∏≠‡∏ô
      final check = await _authService.checkPhone(phone);
      final status = check['status'] ?? '';

      if (status == 'rider-exists' || status == 'both-exist') {
        _showSnack(context, "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Rider ‡πÅ‡∏•‡πâ‡∏ß");
        return false;
      }

      if (status == 'user-exists') {
        // üîî ‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Rider ‡πÄ‡∏û‡∏¥‡πà‡∏°
        await _showOptionDialog(context);
        return false;
      }

      // ‚úÖ 2) ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (status == available)
      await _authService.registerUser(
        phone: phone,
        password: pass,
        name: name,
        profileImage: profileImage,
      );

      if (context.mounted) {
        _showSnack(context, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
        Navigator.pop(context, true);
      }
      return true;
    } on ApiException catch (e) {
      _showSnack(context, e.message);
      return false;
    } catch (e) {
      _showSnack(context, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
      return false;
    } finally {
      isSubmitting = false;
    }
  }

  /// ‚úÖ Dialog ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Rider ‡πÄ‡∏û‡∏¥‡πà‡∏°
  Future<void> _showOptionDialog(BuildContext context) async {
    await showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß"),
        content: const Text(
          "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Rider ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        ),
        actions: [
          TextButton(
            child: const Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
            onPressed: () => Navigator.pop(context),
          ),
          TextButton(
            child: const Text("‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Rider"),
            onPressed: () {
              Navigator.pop(context);
              Navigator.pushNamed(
                context,
                '/registerRider',
                arguments: phoneController.text,
              );
            },
          ),
        ],
      ),
    );
  }

  /// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SnackBar
  void _showSnack(BuildContext context, String msg) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

  void dispose() {
    phoneController.dispose();
    nameController.dispose();
    passwordController.dispose();
  }
}
